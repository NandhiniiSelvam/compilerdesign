#include <stdio.h>
#include <string.h>

int main() {
    char prod[10], alpha[10], beta[10];
    char nonTerminal;

    printf("Enter production (e.g., A->Aa|b): ");
    scanf("%s", prod);

    nonTerminal = prod[0];

    int i = 3, j = 0, k = 0, flag = 0;

    // Parse both parts (e.g., Aa | b)
    while (prod[i] != '\0') {
        if (prod[i] == '|') {
            alpha[j] = '\0';
            beta[k] = '\0';
            break;
        }

        if (prod[i] == nonTerminal && flag == 0) {
            i++;
            while (prod[i] != '|' && prod[i] != '\0')
                alpha[j++] = prod[i++];
            flag = 1;
        } else {
            while (prod[i] != '|' && prod[i] != '\0')
                beta[k++] = prod[i++];
        }

        if (prod[i] == '|') i++;
    }

    alpha[j] = '\0';
    beta[k] = '\0';

    if (flag == 1) {
        printf("Left recursion detected.\n");
        printf("After eliminating left recursion:\n");
        printf("%c -> %s%c'\n", nonTerminal, beta, nonTerminal);
        printf("%c' -> %s%c' | Îµ\n", nonTerminal, alpha, nonTerminal);
    } else {
        printf("No left recursion detected.\n");
        printf("Production is already suitable: %s\n", prod);
    }

    return 0;
}
