#include <stdio.h>
#include <string.h>

char input[100];
char stack[100];
int top = -1, i = 0;

// Try reducing the stack based on grammar
void reduce() {
    while (1) {
        // Reduce: id → E
        if (top >= 1 && stack[top] == 'd' && stack[top - 1] == 'i') {
            stack[top - 1] = 'E';
            top--;
            printf("Reduce: id → E\n");
        }
        // Reduce: E + E → E
        else if (top >= 2 && stack[top] == 'E' && stack[top - 1] == '+' && stack[top - 2] == 'E') {
            stack[top - 2] = 'E';
            top -= 2;
            printf("Reduce: E+E → E\n");
        }
        // Reduce: E * E → E
        else if (top >= 2 && stack[top] == 'E' && stack[top - 1] == '*' && stack[top - 2] == 'E') {
            stack[top - 2] = 'E';
            top -= 2;
            printf("Reduce: E*E → E\n");
        }
        // Reduce: (E) → E
        else if (top >= 2 && stack[top] == ')' && stack[top - 1] == 'E' && stack[top - 2] == '(') {
            stack[top - 2] = 'E';
            top -= 2;
            printf("Reduce: (E) → E\n");
        }
        else {
            break;
        }
    }
}

int main() {
    printf("Enter the input string (use 'id' for identifiers, no spaces): ");
    scanf("%s", input);
    int len = strlen(input);

    printf("\nStack\tInput\tAction\n");

    while (i < len) {
        stack[++top] = input[i++]; // shift
        stack[top + 1] = '\0';
        printf("%s\t%s\tShift\n", stack, input + i);
        reduce();
    }

    // Final reduction
    reduce();

    // Accept condition
    if (top == 0 && stack[0] == 'E') {
        printf("%s\t\tAccepted!\n", stack);
    } else {
        printf("%s\t\tRejected!\n", stack);
    }

    return 0;
}
